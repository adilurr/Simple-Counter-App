import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../models/counter_model.dart';

class CounterWidget extends StatelessWidget {
  final int index;

  const CounterWidget({super.key, required this.index});

  @override
  Widget build(BuildContext context) {
    // Access the CounterModel from the provider.
    // 'watch' ensures this widget rebuilds when the model changes.
    final counterModel = context.watch<CounterModel>();
    final counter = counterModel.counters[index];

    return Card(
      elevation: 4.0,
      margin: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12.0)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Text(
              'Counter ${index + 1}',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 16.0),
            // This widget animates the transition between the old and new count values.
            AnimatedSwitcher(
              duration: const Duration(milliseconds: 300),
              transitionBuilder: (Widget child, Animation<double> animation) {
                // Use a fade and scale transition for a smooth effect.
                return FadeTransition(
                  opacity: animation,
                  child: ScaleTransition(scale: animation, child: child),
                );
              },
              child: Text(
                '${counter.value}',
                // A unique key is crucial for AnimatedSwitcher to detect a change.
                key: ValueKey<int>(counter.value),
                style: Theme.of(context).textTheme.displayMedium?.copyWith(
                      fontWeight: FontWeight.bold,
                      color: Theme.of(context).primaryColor,
                    ),
              ),
            ),
            const SizedBox(height: 16.0),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                // Decrement Button
                IconButton.filled(
                  icon: const Icon(Icons.remove),
                  onPressed: () => context.read<CounterModel>().decrement(index),
                  tooltip: 'Decrement',
                  style: IconButton.styleFrom(
                      backgroundColor: Colors.red.shade300,
                      foregroundColor: Colors.white),
                ),
                // Reset Button
                IconButton.filled(
                  icon: const Icon(Icons.refresh),
                  onPressed: () => context.read<CounterModel>().reset(index),
                  tooltip: 'Reset',
                  style: IconButton.styleFrom(
                      backgroundColor: Colors.grey.shade500,
                      foregroundColor: Colors.white),
                ),
                // Increment Button
                IconButton.filled(
                  icon: const Icon(Icons.add),
                  onPressed: () => context.read<CounterModel>().increment(index),
                  tooltip: 'Increment',
                  style: IconButton.styleFrom(
                      backgroundColor: Colors.green.shade400,
                      foregroundColor: Colors.white),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
